filter {
  ############################ Elastichoney honeypot filter ############################
  filter {
    if [type] == "elastichoney" {
        json {
            source => "message"
        }
    }
  }

  ############################ Cowire/Kippo honeypot filter ############################
  filter {
   if [type] == "cowire" or [type] == "kippo" {
       json {
           source => "message"
       }

       date {
           match => [ "timestamp", "ISO8601" ]
       }

       if [src_ip]  {

           dns {
               reverse => [ "src_host", "src_ip" ]
               action => "append"
           }

           geoip {
               source => "src_ip"
               target => "geoip"
               database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
               add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
               add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
           }

           geoip {
               source => "src_ip"
               database => "/opt/logstash/vendor/geoip/GeoIPASNum.dat"
           }

           mutate {
               convert => [ "[geoip][coordinates]", "float" ]
           }
       }
     }
   }

  # Dionaea honeypot filter
  if [type] == "dionaea" {

  }

  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
}
